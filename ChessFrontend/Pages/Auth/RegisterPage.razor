@page "/register"
@using Blazored.LocalStorage
@using ChessFrontend.ServerAccess
@using MudBlazor
@inject ApiAccessor Api
@inject ILocalStorageService LocalStorage
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-center align-center" Style="height: 100vh;">
    <MudPaper Class="pa-8" Elevation="8" Style="width: 100%; max-width: 420px; border-radius: 16px;">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">Create an Account</MudText>
            <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="Color.Secondary">Join ChessMaster today!</MudText>

            <MudForm @ref="_form">
                <MudTextField Label="Username" @bind-Value="_username" Required="true" Variant="Variant.Outlined" Class="mb-3" />
                <MudTextField Label="Password" @bind-Value="_password" InputType="InputType.Password" Required="true" Variant="Variant.Outlined" Class="mb-3" />
                <MudTextField Label="Confirm Password" @bind-Value="_confirmPassword" InputType="InputType.Password" Required="true" Variant="Variant.Outlined" Class="mb-3" />

                @if (!string.IsNullOrWhiteSpace(_error))
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Class="mb-3">
                        @_error
                    </MudAlert>
                }

                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="RegisterUser">
                    Register
                </MudButton>
            </MudForm>

            <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-4">
                Already have an account?
                <MudLink Href="/login" Color="Color.Primary" Class="ml-1">Log in</MudLink>
            </MudText>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private string? _username;
    private string? _password;
    private string? _confirmPassword;
    private string? _error = "";

    private async Task RegisterUser()
    {
        _error = "";
        await _form?.Validate();

        if (string.IsNullOrWhiteSpace(_username) || string.IsNullOrWhiteSpace(_password) || string.IsNullOrWhiteSpace(_confirmPassword))
        {
            _error = "All fields are required.";
            return;
        }

        if (_password != _confirmPassword)
        {
            _error = "Passwords do not match.";
            return;
        }

        var result = await Api.RegisterAsync(_username!, _password!);
        if (result.Success)
        {
            await LocalStorage.SetItemAsStringAsync("Token", result.Data!.Trim('\"'));
            Nav.NavigateTo("/game");
        }
        else
        {
            _error = result.Message;
        }
    }
}
