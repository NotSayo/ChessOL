@using Shared.Chess.GameManager
@using Shared.Chess.Pieces
@using Shared.Chess.SimplePieces
@using Shared.Types

@if (Game is not null)
{
    <MudDropContainer T="SimplePiece" Items="Game.GameInfo.Pieces" CanDropClass="mud-border-info" NoDropClass="mud-border-error"
                      CanDrop="CanDrop" 
                      ItemsSelector="@((item, dropzone) => item.Position.ToStringIdentifier() == dropzone)" 
                      ItemDropped="ItemUpdated" Class="border-2 border-solid mud-border-lines-default">
        <ChildContent>
            @for(int i = 0; i < 8; i++)
            {
                var row = i.ToString();
                <div class="d-flex">
                    @for (int j = 0; j < 8; j++)
                    {
                        var col = j.ToString();
                        var bg = (i + j) % 2 == 1 ? "background-color:grey;" : "background-color:brown;";
                        var style = bg + "height: 64px; width: 64px;";
                        <MudDropZone T="SimplePiece" Identifier="@(($"{col}{row}"))" DraggingClass="mud-theme-success"
                                     Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" 
                                     Style="@style"/>
                    }
                </div>
            }
        </ChildContent>
        <ItemRenderer>
            <div class="d-flex justify-center align-center flex-grow-1">
                @if (true)
                {
                    var color = context.EPieceColor == EPieceColor.White ? "color: #FFFFFF;" : "color: #000000;";
                    <MudIcon Icon="@context.Icon" Size="Size.Large" Style="@color"/>
                }
            </div>
        </ItemRenderer>
    </MudDropContainer>
    @* <MudList T="IPiece"> *@
    @*     @foreach (var piece in GameInstance.TakenPiecesBlack) *@
    @*     { *@
    @*         <MudListItem Icon="@piece.Icon" IconSize="Size.Large" IconColor="Color.Dark"/> *@
    @*     } *@
    @* </MudList> *@
    @* <MudList T="IPiece"> *@
    @*     @foreach (var piece in GameInstance.TakenPiecesWhite) *@
    @*     { *@
    @*         <MudListItem Icon="@piece.Icon" IconSize="Size.Large" IconColor="Color.Error"/> *@
    @*     } *@
    @* </MudList> *@
}
else
{
    <div>Loading...</div>
}

@code {
    [Parameter]
    public required MultiplayerGame Game { get; set; }
    [Parameter]
    public required string PlayerName { get; set; }

    public EPieceColor PieceColor { get; set; }


    protected override async Task OnInitializedAsync()
    {
        PieceColor = Game.Player1.Name == PlayerName ? EPieceColor.White : EPieceColor.Black;

        foreach (var item in Game.GameInfo.Pieces)
        {
            Console.WriteLine(item.EPieceType.ToString());
            Console.WriteLine(item.Icon);
            Console.WriteLine(item.Position.ToStringIdentifier());
            Console.WriteLine(item.Position.ToString());
        }

        await base.OnInitializedAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void ItemUpdated(MudItemDropInfo<SimplePiece> dropItem)
    {
        // Console.WriteLine($"Dropzone Coords: ROW:{dropItem.DropzoneIdentifier[0]} - COL:{dropItem.DropzoneIdentifier[1]}");
        //
        // var row = dropItem.DropzoneIdentifier[0].ToString();
        // var col = dropItem.DropzoneIdentifier[1].ToString();
        //
        //
        // if (dropItem.Item != null)
        // {
        //     dropItem.Item.Move(new Vector(int.Parse(col), int.Parse(row)));
        //     Console.WriteLine($"Item Coords: {dropItem.Item.Position.X} - {dropItem.Item.Position.Y}");
        // }
    }
    
    private bool CanDrop(SimplePiece piece, string identifier)
    {
        if(piece.EPieceColor != PieceColor)
            return false;
        // Console.WriteLine(identifier);
        //
        // return piece.AvailableMoves
        //     .Any(v => v.X.ToString() == identifier[0].ToString() && v.Y.ToString() == identifier[1].ToString());
        return true;
    }
}