@using Shared.Chess.GameManager
@using Shared.Chess.Pieces
@using Shared.Types

@if (_gameInstance != null)
{
    <MudDropContainer T="IPiece" Items="_gameInstance.Pieces" CanDropClass="mud-border-info" NoDropClass="mud-border-error" 
                      CanDrop="CanDrop" 
                      ItemsSelector="@((item, dropzone) => item.Position.ToStringIdentifier() == dropzone)" 
                      ItemDropped="ItemUpdated" Class="border-2 border-solid mud-border-lines-default">
        <ChildContent>
            @for(int i = 0; i < 8; i++)
            {
                var row = i.ToString();
                <div class="d-flex">
                    @for (int j = 0; j < 8; j++)
                    {
                        var col = j.ToString();
                        var bg = (i + j) % 2 == 1 ? "background-color:grey;" : "background-color:brown;";
                        var style = bg + "height: 64px; width: 64px;";
                            <MudDropZone T="IPiece" Identifier="@(($"{row}{col}"))" DraggingClass="mud-theme-success" 
                                     Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" 
                                     Style="@style"/>
                    }
                </div>
            }
        </ChildContent>
        <ItemRenderer>
            <div class="d-flex justify-center align-center flex-grow-1">
                @if (true)
                {
                    var color = context.PieceColor == EPieceColor.White ? "color: #FFFFFF;" : "color: #000000;";
                    <MudIcon Icon="@context.Icon" Size="Size.Large" Style="@color"/>
                }
            </div>
        </ItemRenderer>
    </MudDropContainer>
}
else
{
    <div>Loading...</div>
}

@code {
    private void ItemUpdated(MudItemDropInfo<IPiece> dropItem)
    {
        Console.WriteLine($"Dropzone Coords: {dropItem.DropzoneIdentifier[0]} - {dropItem.DropzoneIdentifier[1]}");

        var row = Convert.ToByte(dropItem.DropzoneIdentifier[0].ToString());
        var col = Convert.ToByte(dropItem.DropzoneIdentifier[1].ToString());
        
        dropItem.Item.Position = new()
        {
            X = row,
            Y = col
        };
        dropItem.Item.AvailableMoves = new List<Vector>();
        
        Console.WriteLine($"Item Coords: {dropItem.Item.Position.X} - {dropItem.Item.Position.Y}");
    }
    
    private GameInstance? _gameInstance;

    protected override async Task OnInitializedAsync()
    {   
        await base.OnInitializedAsync();

        _gameInstance = new GameInstance()
        {
            Pieces = new List<IPiece>()
        };
        _gameInstance.InitializeGame();
    }

    private bool CanDrop(IPiece piece, string identifier)
    {
        piece.CheckAvailableMoves();
        return piece.AvailableMoves
            .Any(v => v.X.ToString() == identifier[0].ToString() && v.Y.ToString() == identifier[1].ToString());
    }
}